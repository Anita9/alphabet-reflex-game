{"version":3,"sources":["components/GameDifficulties/gameDifficulties.js","components/Score/score.js","components/Letters/letters.js","App.js","index.js"],"names":["GameDifficulties","RadioGroup","row","className","FormControlLabel","control","Radio","color","checked","this","props","isEasyGame","disabled","isGameInProgress","onClick","label","isMediumGame","isHardGame","Component","Score","Typography","variant","List","ListItem","id","ListItemText","primary","concat","hitCount","missCount","leftCount","Letters","alphabet","map","i","letter","code","App","getRandomNumber","min","max","numbersArray","state","numbersPassed","number","Math","floor","random","includes","length","setState","inputValue","push","onRadioButtonClick","difficulty","setTimer","time","timerId","setInterval","startGame","stopGame","clearInterval","generateAlphabet","char1","char2","array","charCodeAt","j","count","String","fromCharCode","validateInput","e","keyCode","which","test","checkInput","inputLetter","isValid","selectedLetter","find","key","toUpperCase","Button","TextField","autoFocus","onKeyPress","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7db9583f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport {RadioGroup, FormControlLabel, Radio} from '@material-ui/core';\r\nimport './gameDiffStyles.css';\r\n\r\nclass GameDifficulties extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <RadioGroup row className=\"game-difficulties\">\r\n        <FormControlLabel\r\n          control={<Radio color=\"primary\" checked={this.props.isEasyGame} disabled={this.props.isGameInProgress} onClick={() => this.props.onClick('easy')}/>}\r\n          label=\"Easy\"\r\n          className=\"game-diff-element\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Radio color=\"primary\" checked={this.props.isMediumGame} disabled={this.props.isGameInProgress} onClick={() => this.props.onClick('medium')}/>}\r\n          label=\"Medium\"\r\n          className=\"game-diff-element\"\r\n        />\r\n        <FormControlLabel\r\n          control={<Radio color=\"primary\" checked={this.props.isHardGame} disabled={this.props.isGameInProgress} onClick={() => this.props.onClick('hard')}/>}\r\n          label=\"Hard\"\r\n          className=\"game-diff-element\"\r\n        />\r\n      </RadioGroup>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameDifficulties;","import React, { Component } from 'react';\r\n\r\nimport {Typography, List, ListItem, ListItemText} from '@material-ui/core';\r\n\r\nimport './scoreStyles.css';\r\n\r\nclass Score extends Component {\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"score-wrapper\">\r\n        <Typography  variant=\"h6\" className=\"score\"> Score </Typography>\r\n        <List>\r\n          <ListItem className=\"score-element\" id=\"hit\">\r\n            <ListItemText primary={\"HIT: \".concat(this.props.hitCount)}/>\r\n          </ListItem>\r\n          <ListItem className=\"score-element\" id=\"miss\">\r\n            <ListItemText primary={\"MISS: \".concat(this.props.missCount)}/>\r\n          </ListItem>\r\n          <ListItem className=\"score-element\" id=\"left\">\r\n            <ListItemText primary={\"Left: \".concat(this.props.leftCount)}/>\r\n          </ListItem>\r\n        </List>\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Score;","import React, { Component } from 'react';\r\n\r\nimport './lettersStyle.css'\r\n\r\nclass Letters extends Component {\r\n\r\n  render () {\r\n\r\n    return (\r\n      <div className=\"alphabet-wrapper\">\r\n        {this.props.alphabet.map(i => <div className={i.color === 'grey' ? \"letter-grey\" : (i.color === 'green' ? \"letter-green\" : \"letter-red\")}>{i.letter} ({i.code})</div>)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Letters;","/* eslint-disable no-useless-constructor */\nimport { Component } from 'react';\n\nimport {Button, TextField} from '@material-ui/core';\n\nimport GameDifficulties from './components/GameDifficulties/gameDifficulties';\nimport Score from './components/Score/score';\nimport Letters from './components/Letters/letters';\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isEasyGame: false,\n      isMediumGame: false,\n      isHardGame: false,\n      number: null,\n      timerId: null,\n      isGameInProgress: false,\n      hitCount: 0,\n      missCount: 0,\n      leftCount: 26,\n      alphabet: this.generateAlphabet('A', 'Z'),\n      numbersPassed: [],\n      inputValue: ''\n    }\n  }\n\n  getRandomNumber = (min, max) => {\n    let numbersArray = this.state.numbersPassed;\n    let number =  Math.floor(Math.random() * (max - min) + min);\n    if(!this.state.numbersPassed.includes(number)) {\n      numbersArray.push(number);\n      this.setState({\n        numbersPassed: numbersArray\n      });\n      return number;\n    } else {\n      if(this.state.numbersPassed.length < max - 1) {\n        return this.getRandomNumber(min, max);\n      } else {\n        this.setState({\n          inputValue: ''\n        })\n        return;\n\n      }\n    }\n  }\n\n  onRadioButtonClick = difficulty => {\n    if(difficulty === 'easy') {\n      this.setState({\n        isEasyGame: true,\n        isMediumGame: false,\n        isHardGame: false\n      })\n    } else if(difficulty === 'medium') {\n      this.setState({\n        isEasyGame: false,\n        isMediumGame: true,\n        isHardGame: false\n      })\n    } else {\n      this.setState({\n        isEasyGame: false,\n        isMediumGame: false,\n        isHardGame: true\n      })\n    }\n  }\n\n  setTimer = time => {\n    let timerId = setInterval(() => {\n      if(this.state.inputValue === ''){\n        this.setState({\n          missCount: this.state.missCount + 1,\n          alphabet: this.state.alphabet.map(i => i.code === this.state.number ? {letter: i.letter, code: i.code, color: 'red'} : {letter: i.letter, code: i.code, color: i.color})\n        })\n      }\n      this.setState({\n        number: this.getRandomNumber(1, 27),\n        inputValue: ''\n      })  \n    }, time);\n    this.setState({\n      timerId\n    });\n  }\n\n  startGame = () => {\n    this.setState({\n      isGameInProgress: true,\n      number: this.getRandomNumber(1, 27),\n      timerId: null\n    });\n\n    if(this.state.isEasyGame) this.setTimer(5000);\n\n    if(this.state.isMediumGame) this.setTimer(3500);\n\n    if(this.state.isHardGame) this.setTimer(2000);\n  }\n\n  stopGame = () => {\n    this.setState({\n      isEasyGame: false,\n      isMediumGame: false,\n      isHardGame: false,\n      number: null,\n      isGameInProgress: false,\n      hitCount: 0,\n      missCount: 0,\n      leftCount: 26,\n      numbersPassed: [],\n      inputValue: ''\n    });\n\n    clearInterval(this.state.timerId);\n  }\n\n  generateAlphabet = (char1, char2) => {\n    let array = [];\n    let i = char1.charCodeAt(0);\n    let j = char2.charCodeAt(0);\n    let count = 1;\n\n    for (; i <= j; ++i) {\n      array.push({letter: String.fromCharCode(i), code: count, color: 'grey'})\n      count++;\n    }\n\n    return array;\n  }\n\n  validateInput = e => {\n    let keyCode = e.keyCode || e.which;\n\n    let regex = /^[a-zA-Z]+$/;\n\n    let isValid = regex.test(String.fromCharCode(keyCode));\n\n    return isValid;\n  }\n\n  checkInput = e => {\n    const {alphabet, number, hitCount, leftCount, missCount} = this.state;\n    let isValid = this.validateInput(e);\n    let selectedLetter = alphabet.find(i => i.code === number);\n    let inputLetter;\n\n    if (!isValid) {\n      return;\n    } else {\n      inputLetter = alphabet.find(i => i.letter === e.key.toUpperCase());\n      this.setState({\n        inputValue: e.key.toUpperCase()\n      })\n      if (inputLetter.code === selectedLetter.code) {\n        alphabet.find(i => i.code === inputLetter.code && i.color === 'green');\n        this.setState({\n          hitCount: hitCount + 1,\n          leftCount: leftCount - 1,\n          alphabet: alphabet.map(i => i.code === inputLetter.code ? {letter: i.letter, code: i.code, color: 'green'} : {letter: i.letter, code: i.code, color: i.color})\n        })\n      } else {\n        alphabet.find(i => i.code === inputLetter.code && i.color === 'red');\n        this.setState({\n          missCount: missCount + 1,\n          leftCount: leftCount - 1,\n          alphabet: alphabet.map(i => i.code === selectedLetter.code ? {letter: i.letter, code: i.code, color: 'red'} : {letter: i.letter, code: i.code, color: i.color})\n        })\n      }\n    }\n  }\n  \n  render() {\n\n    const {isEasyGame, isMediumGame, isHardGame, isGameInProgress, hitCount, missCount, leftCount, alphabet, inputValue} = this.state;\n\n    return (\n      <div className=\"App\">\n        <GameDifficulties isEasyGame={isEasyGame} isMediumGame={isMediumGame} isHardGame={isHardGame} onClick={this.onRadioButtonClick} isGameInProgress={isGameInProgress}/>\n        <Score hitCount={hitCount} missCount={missCount} leftCount={leftCount}/>\n        {!isGameInProgress && \n          <Button\n            variant=\"outlined\"\n            color=\"primary\" \n            className=\"game-button\"\n            onClick={this.startGame}\n            disabled={!isEasyGame && !isMediumGame && !isHardGame}\n          >\n          Start Game\n          </Button>}\n        {isGameInProgress && <Button variant=\"outlined\" color=\"secondary\" className=\"game-button\" onClick={this.stopGame}>Stop Game</Button>}\n        <div className=\"number\">\n          {this.state.number}\n        </div>\n        <TextField autoFocus variant=\"outlined\" label=\"Input Letter\" color=\"primary\" className=\"input-letter\" onKeyPress={this.checkInput} value={inputValue}/>\n        <Letters alphabet={alphabet}/>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}